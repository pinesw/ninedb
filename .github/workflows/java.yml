name: Build and release Java bindings

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - java: 11
            architecture: x64
            os: ubuntu-20.04

          - java: 11
            architecture: x64
            os: windows-2022

          - java: 11
            architecture: arm64
            os: macos-14

    steps:
      - uses: actions/checkout@v4

      - name: Setup Java environment
        uses: actions/setup-java@v4
        with:
          cache: "maven"
          distribution: "adopt"
          java-version: ${{ matrix.java }}
          server-id: maven
          server-username: MAVEN_USERNAME
          server-password: MAVEN_CENTRAL_TOKEN
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Print info
        run: |
          echo "Java version: ${{ matrix.java }}"
          echo "Architecture: ${{ matrix.architecture }}"
          echo "Operating System: ${{ matrix.os }}"

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - run: pip install -r requirements.txt

      - name: Print Conan version
        run: conan --version

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2.0
        with:
          cmake-version: "3.29.x"

      - name: Print CMake version
        run: cmake --version

      - name: Install conan dependencies
        run: conan install . -of java/build -pr:a profiles/profile_${{ matrix.os }}_${{ matrix.architecture }}_Release.conf

      - name: Configure CMake
        shell: bash
        run: |
          cmake -B java/build \
            -S java \
            -DCMAKE_BUILD_TYPE=Release \
            -DCONAN_PATH="${{ github.workspace }}/java/build" \
            -DJDK_HOME="${JAVA_HOME}" \
            -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/java/build/conan_toolchain.cmake"

      - name: Build
        run: cmake --build java/build --config Release

      - name: Configure variables
        id: configure_variables
        shell: bash
        run: |
          case ${{ matrix.os }} in
            ubuntu*)
              CP_SEPARATOR=":"
              LIB_PREFIX="lib"
              LIB_EXT="so"
              ;;
            windows*)
              CP_SEPARATOR=";"
              LIB_PREFIX=""
              LIB_EXT="dll"
              ;;
            macos*)
              CP_SEPARATOR=":"
              LIB_PREFIX="lib"
              LIB_EXT="dylib"
              ;;
          esac
          ARTIFACT_NAME=$(echo ninedb-${{ runner.os }}-${{ runner.arch }} | awk '{print tolower($0)}')
          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
          echo "artifact_source=${LIB_PREFIX}ninedb.${LIB_EXT}" >> $GITHUB_OUTPUT
          echo "artifact_target=${LIB_PREFIX}${ARTIFACT_NAME}.${LIB_EXT}" >> $GITHUB_OUTPUT
          echo "local_cp=${{ github.workspace }}/java/src/main/java${CP_SEPARATOR}${{ github.workspace }}/java/test/java" >> $GITHUB_OUTPUT

      - name: Print variables
        run: |
          echo "local_cp: ${{ steps.configure_variables.outputs.local_cp }}"
          echo "artifact_name: ${{ steps.configure_variables.outputs.artifact_name }}"
          echo "artifact_source: ${{ steps.configure_variables.outputs.artifact_source }}"
          echo "artifact_target: ${{ steps.configure_variables.outputs.artifact_target }}"

      - name: List files in build directory
        shell: bash
        run: ls -la java/build

      - name: Test
        shell: bash
        run: |
          javac -cp "${{ steps.configure_variables.outputs.local_cp }}" java/test/java/io/pinesw/ninedb/Test.java
          java -cp "${{ steps.configure_variables.outputs.local_cp }}" -Djava.library.path=java/build io.pinesw.ninedb.Test

      - name: Prepare artifact for upload
        run: mv java/build/${{ steps.configure_variables.outputs.artifact_source }} ${{ steps.configure_variables.outputs.artifact_target }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.configure_variables.outputs.artifact_name }}
          path: ${{ steps.configure_variables.outputs.artifact_target }}

  release:
    needs: build
    runs-on: ubuntu-20.04
    if: startsWith(github.ref, 'refs/tags/')

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Setup Java environment
        uses: actions/setup-java@v4
        with:
          cache: "maven"
          distribution: "adopt"
          java-version: 11
          server-id: maven
          server-username: MAVEN_USERNAME
          server-password: MAVEN_CENTRAL_TOKEN
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Read tag
        id: read_tag
        run: |
          tag=${GITHUB_REF#refs/tags/}
          echo "Found tag: $tag"
          echo "tag=$tag" >> $GITHUB_ENV
          echo "tag=$tag" >> "$GITHUB_OUTPUT"

      - name: Verify Java package version
        working-directory: java
        run: |
          [[ $(mvn help:evaluate -Dexpression=project.version -q -DforceStdout) == $tag ]] || exit 1

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Print artifacts
        shell: bash
        run: ls -la -R artifacts

      - name: Copy artifacts to target
        run: |
          mkdir -p java/src/main/resources
          find artifacts -name '*.so' | xargs -I {} cp {} java/src/main/resources
          find artifacts -name '*.dll' | xargs -I {} cp {} java/src/main/resources
          find artifacts -name '*.dylib' | xargs -I {} cp {} java/src/main/resources

      - name: Package jar
        run: |
          mvn clean package -f java/pom.xml

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: java
          path: java/target/ninedb-${{ steps.read_tag.outputs.tag }}.jar

      - name: Publish to Apache Maven Central
        run: mvn deploy
        env:
          MAVEN_USERNAME: szrmYssu
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
